## Nginx用の設定

# サーバーグループの定義（proxy_passのURLとして利用）
upstream api_v1 {
  server unix:///backend/tmp/sockets/puma.sock;
}

# サーバーの設定
server {
  # ポート番号
  listen 80;

  # サーバー名（ドメインもしくはIPを設定）
  server_name localhost fable-insect-search.com;

  # ログ出力先
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  # ドキュメントのルート設定
  root /backend/public;

  # リクエストボディサイズ（単位mはMB）
  client_max_body_size 100m;

  # リクエストの受信とファイルチェック
  # 「$uri」はリクエストされたURL
  # 左から順にチェックして返すが、最後の記述はリダイレクト処理
  try_files $uri/index.html $uri @app;

  # HTTP通信のタイムアウト設定）
  keepalive_timeout 10;

  # リバースプロキシ関連の設定
  location @app {
    proxy_set_header X-Real-IP $remote_addr;  #クライアントのIPアドレス
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  #プロキシを経由した際の元のIPアドレス
    proxy_set_header Host $http_host; 
    proxy_pass http://api_v1;
  }
}

# try_filesでリクエストされたURIに対応するファイルがあるかを/backend/publicディレクトリ内で探し、もしなければlocation @appに処理を移す
# location @appではリクエストヘッダーに情報を追加して、proxy_passで指定したupstreamにリクエストを転送する
# pumaがリクエストを処理しレスポンスを返すと、nginxがそれを受け取り、クライアントに返す
# 結果、ブラウザや他のHTTPクライアントが要求したコンテンツが提供される
