name: Backend's Deploy CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
env:
  AWS_REGION: ap-northeast-1
  ECS_SERVICE: fable-production-backend-service
  ECS_CLUSTER: fable-production-cluster
  ECS_TASK_DEFINITION_BACKEND: fable-production-backend-task-definition
permissions:
  contents: read

jobs:
  # Test
  test:
    if: github.event_name == 'pull_request'
    name: Test
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    services:
      mysql:
        image: mysql:8.0.31
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: fable_backend_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    env:
      DB_USERNAME: root
      DB_PASSWORD: password
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Set up Ruby
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
          bundler-cache: true
      # gem install
      - name: Bundler and gem install
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3 --path vendor/bundle
      # DB migration
      - name: DB migration
        run: |
          cp config/database.yml.ci config/database.yml
          bundle exec rails db:create RAILS_ENV=test
          bundle exec rails db:migrate RAILS_ENV=test
      # Rubocop
      - name: Run Rubocop
        run: bundle exec rubocop
      # RSpec
      - name: Run RSpec
        run: bundle exec rspec

  # Deploy
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      ## Build Docker Image Build
      - name: Build an Image for nginx
        run: |
          docker build --platform linux/X86_64 -t fable-production-nginx ./nginx
      - name: Build an Image for backend
        run: |
          docker build --platform linux/X86_64 -t fable-production-backend .
      ## Login AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      ## Push image to ECR
      - name: Push nginx image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_NGINX_REPOSITORY }}
        run: |
          docker tag fable-production-nginx:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_BACKEND_SERVER_REPOSITORY }}
        run: |
          docker tag fable-production-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      # Download Task Definition(ECRが更新されtask-definition変更なしでは、serviceの新しいデプロイの強制を使えないので、task-definitionを読み込む必要がある)
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_BACKEND --query taskDefinition > task-definition-backend.json
      - name: Display task definition content
        run: cat task-definition-backend.json
      # ECR image exchanged and Render Task Definition
      - name: render ecs task definition for backend container
        id: render-container-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-backend.json
          container-name: fable-production-backend-container
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_BACKEND_SERVER_REPOSITORY }}:latest # task definitionのimageをこれに更新
      ## Push to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true # wait for the service to become stable
