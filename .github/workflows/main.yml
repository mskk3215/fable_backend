name: Backend's Deploy CI/CD

on:
  push: # Trigger the workflow on push events
    branches: ["main"]
  pull_request: # Trigger the workflow on pull request events
env:
  AWS_REGION: ap-northeast-1
  ECS_SERVICE: fable-production-backend-service
  ECS_CLUSTER: fable-production-cluster
  ECS_TASK_DEFINITION_BACKEND: fable-production-backend-task-definition
permissions:
  contents: read

jobs:
  # backend Container Test
  backend-test-build-image: # title of the job
    name: backend Container - Test and Build # name of GitHub Action
    runs-on: ubuntu-20.04 # environment for job to run on
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3 # checkout the repo
      ## Test
      # - name: Run Tests
      #   run: |
      #     npm run test

  # Deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    needs: [backend-test-build-image] # このjobが実行される前に実行されるjobを指定
    # only run the deployment on push to main branch
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      ## Build Docker Image Build
      - name: Build an Image for nginx
        run: |
          docker build --platform linux/X86_64 -t fable-production-nginx ./nginx
      - name: Build an Image for backend
        run: |
          docker build --platform linux/X86_64 -t fable-production-backend .
      ## Login AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      ## Push image to ECR
      - name: Push nginx image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_NGINX_REPOSITORY }}
        run: |
          docker tag fable-production-nginx:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_BACKEND_SERVER_REPOSITORY }}
        run: |
          docker tag fable-production-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      # Download Task Definition(ECRが更新されtask-definition変更なしでは、serviceの新しいデプロイの強制を使えないので、task-definitionを読み込む必要がある)
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_BACKEND --query taskDefinition > task-definition-backend.json
      - name: Display task definition content
        run: cat task-definition-backend.json
      # ECR image exchanged and Render Task Definition
      - name: render ecs task definition for backend container
        id: render-container-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-backend.json
          container-name: fable-production-backend-container
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_BACKEND_SERVER_REPOSITORY }}:latest # task definitionのimageをこれに更新
      ## Push to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true # wait for the service to become stable
